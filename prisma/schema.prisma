

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  first_name String
  last_name String
  user_name String @unique
  mail String @unique
  birth_date DateTime
  msisdn String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
  last_login DateTime?
  status Status? @default(ACTIVE)
  password Password?
  roles UserRole[]
  verification Verified?
  tokens Token[]

}
model Password{
  user User @relation(fields:[user_id], references: [id], onDelete: Cascade)
  user_id String @unique
  password_hash String
  password_salt String @unique
  updated_at DateTime @updatedAt
}
model Role{
  id String @id @default(uuid())
  role_name String @unique
  user_roles UserRole[]
}
model UserRole{
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String @unique
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)
  role_id String @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?
}
model Verified{
 user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
 user_id String @unique
 mail_verified Boolean @default(false)
 phone_verified Boolean @default(false)
 mail_verified_at DateTime?
 phone_verified_at DateTime?
}
model Token{
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String 
  token String @unique
  refresh_token String @unique
  device_info String?
  ip_address String?
  created_at DateTime @default(now())
  expires_at DateTime
}

enum Status{
  ACTIVE
  INACTIVE
  BANNED
  DELETED
}
